{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMF7Uc/8qjsjmgKfk9QFaDS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Merge k sorted lists"],"metadata":{"id":"Yx4b1S0NHQKp"}},{"cell_type":"code","source":["#The code\n","import heapq\n","\n","def mergeKLists(lists):\n","    merged = []\n","    heap = []\n","\n","    for i, lst in enumerate(lists):\n","        if lst:\n","            heapq.heappush(heap, (lst[0], i, 0))\n","\n","    while heap:\n","        value, list_index, element_index = heapq.heappop(heap)\n","        merged.append(value)\n","\n","        if element_index + 1 < len(lists[list_index]):\n","            next_element = lists[list_index][element_index + 1]\n","            heapq.heappush(heap, (next_element, list_index, element_index + 1))\n","\n","    return merged"],"metadata":{"id":"gWmeVTN8K5r5"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aePqmu-_HCse","executionInfo":{"status":"ok","timestamp":1689602288181,"user_tz":-330,"elapsed":457,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"f576d528-e998-4ba3-d222-0fd0e6cd9a23"},"outputs":[{"output_type":"stream","name":"stdout","text":["heap = [(4, 0, 0), (8, 1, 0)]\n","\n","heap after poping in iter 1 : [(8, 1, 0)]\n","(value, list_index, element_index) at iter = 1 : 4 0 0\n","merged at iter 1 : [4]\n","heap after pushing and then heapifying in iter 1 : [(5, 0, 1), (8, 1, 0)]\n","heap after poping and then pushing and then heapifying in iter 1 : [(5, 0, 1), (8, 1, 0)]\n","\n","heap after poping in iter 2 : [(8, 1, 0)]\n","(value, list_index, element_index) at iter = 2 : 5 0 1\n","merged at iter 2 : [4, 5]\n","heap after poping and then pushing and then heapifying in iter 2 : [(8, 1, 0)]\n","\n","heap after poping in iter 3 : []\n","(value, list_index, element_index) at iter = 3 : 8 1 0\n","merged at iter 3 : [4, 5, 8]\n","heap after pushing and then heapifying in iter 3 : [(26, 1, 1)]\n","heap after poping and then pushing and then heapifying in iter 3 : [(26, 1, 1)]\n","\n","heap after poping in iter 4 : []\n","(value, list_index, element_index) at iter = 4 : 26 1 1\n","merged at iter 4 : [4, 5, 8, 26]\n","heap after pushing and then heapifying in iter 4 : [(69, 1, 2)]\n","heap after poping and then pushing and then heapifying in iter 4 : [(69, 1, 2)]\n","\n","heap after poping in iter 5 : []\n","(value, list_index, element_index) at iter = 5 : 69 1 2\n","merged at iter 5 : [4, 5, 8, 26, 69]\n","heap after poping and then pushing and then heapifying in iter 5 : []\n","\n","merged = [4, 5, 8, 26, 69]\n"]}],"source":["import heapq\n","heap = []\n","merged = []\n","# Initialize the heap with the first element from each list\n","for i, lst in enumerate([[4, 5], [8, 26, 69]]): #enumerate(lists) gives (position, position of each list)\n","    if lst: #if lst is not empty:\n","        heapq.heappush(heap, (lst[0], i, 0))\n","print('heap =',heap)\n","print()\n","iter =0\n","while heap: #while heap is not empty\n","        iter+=1\n","        value, list_index, element_index = heapq.heappop(heap)\n","        print('heap after poping in iter', iter, ':', heap)\n","        print('(value, list_index, element_index) at iter =',iter,':',value, list_index, element_index)\n","        merged.append(value)\n","        print('merged at iter', iter,':',merged)\n","        if element_index + 1 < len([[4, 5], [8, 26, 69]][list_index]): #check if there is a next element in the same list from which we popped\n","            next_element = [[4, 5], [8, 26, 69]][list_index][element_index + 1]\n","            heapq.heappush(heap, (next_element, list_index, element_index + 1))\n","            print('heap after pushing and then heapifying in iter', iter, ':', heap)\n","        print('heap after poping and then pushing and then heapifying in iter', iter, ':', heap)\n","        print()\n","        #if there is no next element, you can see that the heap gets updated to take into the next element of the list of lists\n","print('merged =',merged)"]},{"cell_type":"markdown","source":["### Binary Search Tree"],"metadata":{"id":"S0hWCTvOcKyk"}},{"cell_type":"code","source":["class Tree:\n","  def __init__(self, initval = None):\n","    self.value = initval\n","    if self.value: #if self.value is not None, then create two trees to the left and to the right\n","      self.left = Tree()\n","      self.right = Tree()\n","    else: #if self.value is None, then left and right trees are None\n","      self.left = None\n","      self.right = None\n","    return\n","\n","  def isempty(self):\n","    return(self.value==None) #only the empty node has the value None\n","\n","  def isleaf(self): #leaf node has both children empty\n","    return(self.value!=None and self.left.isempty() and self.right.isempty())\n","\n","  def inorder(self): # print a tree in an inorder traveral(first left subtree then node and then the right subtree)\n","    if self.isempty():\n","      return([])\n","    else:\n","      return(self.left.inorder() + [self.value] + self.right.inorder())\n","\n","  def __str__(self): # display tree as a string\n","    return(str(self.inorder()))\n","\n","  def find(self, v): #to find a value, v in a tree\n","    if self.isempty():\n","      return(False)\n","    if self.value == v:\n","      return(True)\n","    if v < self.value:\n","      return(self.left.find(v))\n","    if v > self.value:\n","      return(self.right.find(v))\n","\n","  def minval(self): #to find the minimum value of a tree\n","    if self.left.isempty():\n","      return(self.value)\n","    else:\n","      return(self.left.minval())\n","\n","  def maxval(self): #to find the maximum value of a tree\n","    if self.right.isempty():\n","      return(self.value)\n","    else:\n","      return(self.right.maxval())\n","\n","  def insert(self, v):\n","    if self.isempty():\n","      self.value = v\n","      self.left = Tree()\n","      self.right = Tree()\n","    if self.value == v:\n","      return\n","    if v < self.value:\n","      return(self.left.insert(v))\n","    if v > self.value:\n","      return(self.right.insert(v))\n","\n","  def delete(self,v):\n","    if self.isempty():\n","      return\n","    elif v < self.value:\n","      return(self.left.delete(v))\n","    elif v > self.value:\n","      return(self.right.delete(v))\n","    elif v == self.value:\n","      if self.isleaf():\n","        self.makeempty() #if its a leaf node, made this node an empty node\n","      elif self.left.isempty():\n","        self.copy_right()\n","      elif self.right.isempty():\n","        self.copy_left()\n","      else:\n","        self.value = self.left.maxval()\n","        self.left.delete(self.left.maxval())\n","      return\n","\n","  def makempty(self):\n","    self.value = None\n","    self.left = None\n","    self.right = None\n","    return\n","\n","  def copy_left(self):\n","    self.value = self.left.value\n","    self.left = self.left.left\n","    self.right = self.left.right\n","    return\n","\n","  def copy_right(self):\n","    self.value = self.right.value\n","    self.left = self.right.left\n","    self.right = self.right.right\n","    return\n","\n","\n"],"metadata":{"id":"u-O1uGBzHgr0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def maxLessThan(root, K):\n","\n","    if root.value is None:\n","        return None\n","\n","    if root.value == K:\n","        return K\n","\n","    if K < root.value:\n","        return maxLessThan(root.left, K)\n","\n","    if K > root.value:\n","\n","        right_result = maxLessThan(root.right, K)\n","\n","        if right_result is not None:\n","            return right_result\n","        else:\n","            return root.value\n","\n","\n"],"metadata":{"id":"EOHxJrPkkoYH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def maxLessThan(root, K):\n","    if root is None:\n","        return None\n","\n","    if root.value is None:\n","        return None\n","\n","    if root.value == K:\n","        return K\n","\n","    if K < root.value:\n","        return maxLessThan(root.left, K)\n","\n","    if K > root.value:\n","\n","        right_result = maxLessThan(root.right, K)\n","        if right_result is not None:\n","            return right_result\n","\n","        # If the right subtree doesn't have a valid result,\n","        # return the current node's value as it is the maximum\n","        # less than or equal to K\n","        return root.value\n","\n","    # If K is equal to the current node's value,\n","    # return the current node's value\n","    return root.value"],"metadata":{"id":"6yATpwjABsQm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def prime(p):\n","    flag = True\n","    if p==1:\n","        return False\n","    import math\n","    for i in range(2,int(math.sqrt(p))+1):\n","        if p%i==0:\n","            flag = False\n","    return flag"],"metadata":{"id":"tkRbCIidzXA8","executionInfo":{"status":"ok","timestamp":1691391742333,"user_tz":-330,"elapsed":8,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["prime(14)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IIDkWbCTzXxJ","executionInfo":{"status":"ok","timestamp":1691391758454,"user_tz":-330,"elapsed":5,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"e0b2faa9-4e6a-428a-9a3a-10ab82eb612c"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":[],"metadata":{"id":"6XZzO2Mlzer8"},"execution_count":null,"outputs":[]}]}