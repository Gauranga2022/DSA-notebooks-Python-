{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNisxdj68T3sYW5EKaaAEs/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Breadth for Search (BFS)"],"metadata":{"id":"__1UjEHzcHT9"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"NJ6D7_M7YbIA"},"outputs":[],"source":["class Queue():\n","  def __init__(self):\n","    self.queue = [] #empty list\n","  def addq(self,v):\n","    self.queue.append(v)\n","  def delq(self): # returns the first element from a list and deletes it from the list\n","    v = None\n","    if not self.isempty():\n","      v = self.queue[0]\n","      self.queue = self.queue[1:]\n","      return(v)\n","  def isempty(self):\n","    return(self.queue == [])\n","  def str(self):\n","    return(str(self.queue))"]},{"cell_type":"code","source":["q = Queue()\n","for i in range(3):\n","  q.addq(i)\n","  print(q.str())\n","print(q.isempty())\n","for i in range(3):\n","  q.delq()\n","  print(q.str())\n","print(q.isempty())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c01GfSrJZ3Zz","executionInfo":{"status":"ok","timestamp":1692465112450,"user_tz":-330,"elapsed":4,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"ef1cd546-4141-4b5b-f69e-4eb372fba8d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\n","[0, 1]\n","[0, 1, 2]\n","False\n","[1, 2]\n","[2]\n","[]\n","True\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","'''def neighbours(AMat,v):\n","  neigh = []\n","  (rows, columns) = AMat.shape\n","  for i in range(rows):\n","    if AMat[v]==1:\n","      neigh.append(i)\n","  return neigh'''\n","\n","#def AList()\n","\n","def BFS(AList,v):\n","  #initialisation\n","  (level,parent) = ({},{})\n","  for i in range(AList.keys()):\n","    level[i]=-1\n","    parent[i]=-1\n","\n","  q = Queue() #a queue has been set up as an empty list from the class queue\n","\n","  q.addq(v)\n","  level[v]=0\n","\n","  while (not q.isempty()):\n","    j = q.delq()\n","    for k in AList[j]:\n","      if level[k]==-1:\n","        q.addq(k)\n","        level[j]=level[k]+1\n","        parent[j]=k\n","\n","  return(level,parent) #They are dictionaries\n","\n","\n","\n"],"metadata":{"id":"m_eJLNnSaW1p"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Depth For Search (DFS)"],"metadata":{"id":"VV824pRB3oF5"}},{"cell_type":"code","source":["(visited, parent)=({},{})\n","\n","def DFSInitList(AList):\n","  for i in range(AList.keys()): #what if AList is a list?\n","    visited[i]=False\n","    parent[i]=-1\n","  return(visited, parent)\n","\n","def DFSListGlobal(AList,v):\n","  visited[v]=True\n","  for k in AList.keys[v]:\n","   if not visited[k]:\n","    parent[k]=v\n","    DFSListGlobal(AList,k)\n","  return(visited, parent)"],"metadata":{"id":"fz_ss-oXmPbT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Finding no. of components in a graph"],"metadata":{"id":"0Ii45_YLSgth"}},{"cell_type":"code","source":["def Components(AList):\n","  component = {} #component is a dictionary\n","  for i in AList.keys():\n","    component[i]=-1 #initialise components of every i to -1\n","  (compid, seen)=(0,0)\n","  while seen <= max(AList.keys()):\n","    startv = min([i for i in AList.key() if component[i]==-1])\n","    visited = BFS(AList, startv) #returns a list of vertices\n","    for i in visited.keys():\n","      if visited[i]==True:\n","        seen+=1\n","        component[i]=compid\n","    compid+=1\n","  return(component)"],"metadata":{"id":"6Bit9ix5Smuo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# DFS Tree"],"metadata":{"id":"JivdIT-xVQUA"}},{"cell_type":"code","source":["(visited, pre, post) =({},{},{})\n","\n","def DFSinitPrePost(AList):\n","  for i in AList.keys():\n","    visited[i]=False\n","    pre[i]=-1\n","    post[i]=-1\n","  return(visited, pre, post)\n","count=0\n","def DFSprepost(AList,v,count):\n","  visited[v]=True\n","  pre[v]=count\n","  count+=1\n","  for k in AList[v]:\n","    if not visited[k]:\n","      count = DFSprepost(AList,k,count)\n","  post[v]=count\n","  count+=1\n","  return(count)\n"],"metadata":{"id":"9uO2Q6KFVS31"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Queue():\n","  def __init__(self):\n","    self.queue = []\n","  def addq(self,v):\n","    self.queue.append(v)\n","  def delq(self): # returns the first element from a list and deletes it from the list\n","    v = None\n","    if not self.isempty():\n","      v = self.queue[0]\n","      self.queue = self.queue[1:]\n","      return(v)\n","  def isempty(self):\n","    return(self.queue == [])\n","  def str(self):\n","    return(str(self.queue))\n","\n","def neighbours(GMat,v):\n","    neighbours = []\n","    for i in range(len(GMat)):\n","        if GMat[v][i]==1:\n","            neighbours.append(i)\n","    return neighbours\n","\n","def findConnectionLevel(vertices, GMat, px, py):\n","    level = {}\n","    for i in range(len(GMat)):\n","        level[i]=-1\n","    level[px]=0\n","    q = Queue()\n","    q.addq(px)\n","    while (not q.isempty()):\n","        j = q.delq()\n","        for k in neighbours(GMat,j):\n","            if level[k]==-1:\n","              level[k]=level[j]+1\n","              q.addq(k)\n","\n","    return(level)\n","\n","\n","\n","vertices = int(input())\n","Amat = []\n","for i in range(vertices):\n","  row = [int(item) for item in input().split(\" \")]\n","  Amat.append(row)\n","personX = int(input())\n","personY = int(input())\n","print(findConnectionLevel(vertices, Amat, personX, personY))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PiMx6ZJp2qk5","executionInfo":{"status":"ok","timestamp":1687641196300,"user_tz":-330,"elapsed":21787,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"c9130e74-985f-4a76-b0e4-a4536cdb3fe2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","1 1 1\n","1 1 1\n","1 1 1\n","2\n","0\n","{0: -1, 1: -1, 2: 0}\n"]}]},{"cell_type":"code","source":["def neighbours(GMat,v):\n","    neighbours = []\n","    for i in range(len(GMat)):\n","        if GMat[v][i]==1:\n","            neighbours.append(i)\n","    return neighbours\n","Amat = []\n","for i in range(3):\n","  row = [int(item) for item in input().split(\" \")]\n","  Amat.append(row)\n","print(Amat)\n","\n","personY = int(input())\n","print(neighbours(Amat,personY))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1NOXc2mW3J8b","executionInfo":{"status":"ok","timestamp":1687638172300,"user_tz":-330,"elapsed":29482,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"ed2ec65c-f3c5-4b53-8254-d400b5e00380"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 0 1\n","1 1 0\n","0 0 1\n","[[1, 0, 1], [1, 1, 0], [0, 0, 1]]\n","1\n","[0, 1]\n"]}]},{"cell_type":"markdown","source":["# Topological Sorting in DAGs"],"metadata":{"id":"f64JPYoBPGv-"}},{"cell_type":"code","source":["class Queue():\n","  def __init__(self):\n","    self.queue = []\n","  def addq(self,v):\n","    self.queue.append(v)\n","  def delq(self): # returns the first element from a list and deletes that element from the list\n","    v = None\n","    if not self.isempty():\n","      v = self.queue[0]\n","      self.queue = self.queue[1:]\n","      return(v)\n","  def isempty(self):\n","    return(self.queue == [])\n","  def str(self):\n","    return(str(self.queue))\n","\n","def toposort(AList):\n","  (indegree, toposort_list) = ({},[])\n","  for v in AList.keys():\n","    indegree[v]=0\n","  for v in AList.keys():\n","    for u in AList[v]:\n","      indegree[u]+=1 #updates the indegree of every vertex\n","  zero_deg_q = Queue()\n","  for v in AList.keys():\n","    if indegree[v]==0:\n","      zero_deg_q.addq(v)\n","  while (not zero_deg_q.isempty()):\n","    j = zero_deg_q.delq()\n","    toposort_list.append(j)\n","    indegree[j]-=1\n","    for k in AList[j]:\n","      indegree[k]-=1\n","      if indegree[k]==0:\n","        zero_deg_q.addq(k)\n","  return(toposort_list)\n"],"metadata":{"id":"Y1PWgXXa3cCS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["AList  = {'Madurai': ['Cochin', 'Kanyakumari'],\n"," 'Vaishali': [],\n"," 'Varanasi': ['Khajuraho', 'Bodhgaya'],\n"," 'Thiruvanandhapuram': ['Kanyakumari'],\n"," 'Udaipur': ['Gir', 'Ajanta'],\n"," 'Rishikesh': ['Delhi'],\n"," 'Shimla': ['Rishikesh'],\n"," 'Bangalore': ['Chennai', 'Madurai'],\n"," 'Agra': ['Ranthambore'],\n"," 'Ellora': ['Aurangabad'],\n"," 'Bodhgaya': ['Kolkatta'],\n"," 'Cochin': ['Thiruvanandhapuram'],\n"," 'Pushkar': ['Udaipur', 'Ranthambore'],\n"," 'Ranthambore': ['Khajuraho'],\n"," 'Gir': [],\n"," 'Aurangabad': ['Mumbai'],\n"," 'Kolkatta': ['Ajanta', 'Bangalore', 'Chennai'],\n"," 'Chennai': ['Madurai'],\n"," 'Sravasti': ['Kushinagar'],\n"," 'Leh': ['Shimla'],\n"," 'Sarnath': ['Varanasi'],\n"," 'Delhi': ['Jaipur', 'Agra', 'Sravasti'],\n"," 'Goa': ['Cochin', 'Bangalore'],\n"," 'Kanyakumari': [],\n"," 'Kushinagar': ['Sarnath', 'Vaishali'],\n"," 'Khajuraho': ['Ajanta'],\n"," 'Jaipur': ['Pushkar'],\n"," 'Mumbai': ['Goa'],\n"," 'Ajanta': ['Ellora', 'Aurangabad']}\n","\n","\n","toposort(AList)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DzRgVg7wS80r","executionInfo":{"status":"ok","timestamp":1687894031335,"user_tz":-330,"elapsed":615,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"0aea489e-dd4d-4946-e3ed-88e99eb9f637"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Leh',\n"," 'Shimla',\n"," 'Rishikesh',\n"," 'Delhi',\n"," 'Jaipur',\n"," 'Agra',\n"," 'Sravasti',\n"," 'Pushkar',\n"," 'Kushinagar',\n"," 'Udaipur',\n"," 'Ranthambore',\n"," 'Sarnath',\n"," 'Vaishali',\n"," 'Gir',\n"," 'Varanasi',\n"," 'Khajuraho',\n"," 'Bodhgaya',\n"," 'Kolkatta',\n"," 'Ajanta',\n"," 'Ellora',\n"," 'Aurangabad',\n"," 'Mumbai',\n"," 'Goa',\n"," 'Bangalore',\n"," 'Chennai',\n"," 'Madurai',\n"," 'Cochin',\n"," 'Thiruvanandhapuram',\n"," 'Kanyakumari']"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["class Queue():\n","  def __init__(self):\n","    self.queue = []\n","  def addq(self,v):\n","    self.queue.append(v)\n","  def delq(self): # returns the first element from a list and deletes it from the list\n","    v = None\n","    if not self.isempty():\n","      v = self.queue[0]\n","      self.queue = self.queue[1:]\n","      return(v)\n","  def isempty(self):\n","    return(self.queue == [])\n","  def str(self):\n","    return(str(self.queue))\n","  def length(self):\n","    return(len(self.queue))\n","\n","def findMasterTank(v, e):      #v : vertices, #e : edges\n","  AList ={}\n","  for v1, v2 in e:\n","    if v1 not in AList:\n","        AList[v1] = []\n","    if v2 not in AList:\n","        AList[v2] = []\n","    AList[v1].append(v2)\n","  (indegree, toposort_list) = ({},[])\n","  for v in AList.keys():\n","    indegree[v]=0\n","  for v in AList.keys():\n","    for u in AList[v]:\n","      indegree[u]=int(indegree[u])+1\n","  zero_deg_q = Queue()\n","  for v in AList.keys():\n","    if indegree[v]==0:\n","      zero_deg_q.addq(v)\n","  if zero_deg_q.length()==1:\n","    while (not zero_deg_q.isempty()):\n","      j = zero_deg_q.delq()\n","      toposort_list.append(j)\n","      indegree[j]-=1\n","      for k in AList[j]:\n","        indegree[k]-=1\n","        if indegree[k]==0:\n","          zero_deg_q.addq(k)\n","    return(int(toposort_list[0]))\n","  else:\n","    return(0)\n","\n","\n"],"metadata":{"id":"qCK58YB7RV4f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["k = Queue()\n","k.addq(2)\n","k.length()== 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"niqdc2IT-H1C","executionInfo":{"status":"ok","timestamp":1687821047840,"user_tz":-330,"elapsed":2,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"48274f18-0acf-4ed8-8a48-53dc4d51b4b2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["v = [item for item in input().split(\" \")]\n","#Tanks(vertices) numbered from 1 to n in string format.\n","numberOfEdges = int(input())\n","e = []\n","for i in range(numberOfEdges):\n","  s = input().split(\" \")\n","  e.append((s[0], s[1]))\n","print(findMasterTank(v, e))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xaR7k-YHZykn","executionInfo":{"status":"ok","timestamp":1687819525939,"user_tz":-330,"elapsed":12774,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"8c2b18ff-b271-444a-94df-87c360055694"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3 4\n","3 \n","1 2\n","2 3\n","2 4\n","1\n"]}]},{"cell_type":"code","source":["e = [('1', '2'), ('2', '3'), ('2', '4')]\n","\n","adjacency_list = {}\n","\n","for edge in e:\n","    v1, v2 = edge\n","    if v1 not in adjacency_list:\n","        adjacency_list[v1] = []\n","    adjacency_list[v1].append(v2)\n","\n","print(adjacency_list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pENWXatlxX-V","executionInfo":{"status":"ok","timestamp":1687817794198,"user_tz":-330,"elapsed":589,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"828d29bb-e679-47d6-87bd-0e8857640c02"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'1': ['2'], '2': ['3', '4']}\n"]}]},{"cell_type":"code","source":["e[1][0]==str(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dTnmbPu3Z13-","executionInfo":{"status":"ok","timestamp":1687816064551,"user_tz":-330,"elapsed":540,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"90bc3c6e-b3b9-4ba0-a83a-bcbe76146700"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["AList ={}\n","for i in range(1,6):\n","  AList[i]=[]\n","print(AList)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m5-yrdnwph2A","executionInfo":{"status":"ok","timestamp":1687817651367,"user_tz":-330,"elapsed":4,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"19c1f1f5-8a84-42bb-e2d8-940697ade532"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1: [], 2: [], 3: [], 4: [], 5: []}\n"]}]},{"cell_type":"markdown","source":["# Longest Path in DAGs"],"metadata":{"id":"iXV7qp7k7vuR"}},{"cell_type":"code","source":["class Queue():\n","  def __init__(self):\n","    self.queue = []\n","  def addq(self,v):\n","    self.queue.append(v)\n","  def delq(self): # returns the first element from a list and deletes it from the list\n","    v = None\n","    if not self.isempty():\n","      v = self.queue[0]\n","      self.queue = self.queue[1:]\n","      return(v)\n","  def isempty(self):\n","    return(self.queue == [])\n","  def str(self):\n","    return(str(self.queue))\n","  def length(self):\n","    return(len(self.queue))\n","\n","def get_key_from_value(dictionary, value):\n","    for key, val in dictionary.items():\n","        if val == value:\n","            return key\n","\n","def longestpathlist(AList):\n","  (lpath,indegree,path) = ({},{},[])\n","  for v in AList.keys():\n","    (indegree[v],lpath[v])=(0,0)\n","  for v in AList.keys():\n","    for u in AList[v]:\n","      indegree[u]+=1\n","  zerodegreeq = Queue()\n","  for v in AList.keys():\n","    if indegree[v]==0:\n","      zerodegreeq.addq(v)\n","  while not zerodegreeq.isempty():\n","    j = zerodegreeq.delq()\n","    indegree[j]-=1\n","    for k in AList[j]:\n","      indegree[k]-=1\n","      lpath[k]=max(lpath[k],lpath[j]+1)\n","      if indegree[k]==0:\n","        zerodegreeq.addq(k)\n","  for i in range(max(lpath.values())+1):\n","    path.append(get_key_from_value(lpath, i))\n","  return(path)\n","\n"],"metadata":{"id":"0QVV1OmTx622"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["max(longestpathlist(AList).values())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NT5Lx4EuUj5K","executionInfo":{"status":"ok","timestamp":1687902561711,"user_tz":-330,"elapsed":2,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"f6b9dbf5-a80a-4fb7-8707-68ee28f1bf43"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["longestpathlist({'Madurai': ['Cochin', 'Kanyakumari'],\n"," 'Vaishali': [],\n"," 'Varanasi': ['Khajuraho', 'Bodhgaya'],\n"," 'Thiruvanandhapuram': ['Kanyakumari'],\n"," 'Udaipur': ['Gir', 'Ajanta'],\n"," 'Rishikesh': ['Delhi'],\n"," 'Shimla': ['Rishikesh'],\n"," 'Bangalore': ['Chennai', 'Madurai'],\n"," 'Agra': ['Ranthambore'],\n"," 'Ellora': ['Aurangabad'],\n"," 'Bodhgaya': ['Kolkatta'],\n"," 'Cochin': ['Thiruvanandhapuram'],\n"," 'Pushkar': ['Udaipur', 'Ranthambore'],\n"," 'Ranthambore': ['Khajuraho'],\n"," 'Gir': [],\n"," 'Aurangabad': ['Mumbai'],\n"," 'Kolkatta': ['Ajanta', 'Bangalore', 'Chennai'],\n"," 'Chennai': ['Madurai'],\n"," 'Sravasti': ['Kushinagar'],\n"," 'Leh': ['Shimla'],\n"," 'Sarnath': ['Varanasi'],\n"," 'Delhi': ['Jaipur', 'Agra', 'Sravasti'],\n"," 'Goa': ['Cochin', 'Bangalore'],\n"," 'Kanyakumari': [],\n"," 'Kushinagar': ['Sarnath', 'Vaishali'],\n"," 'Khajuraho': ['Ajanta'],\n"," 'Jaipur': ['Pushkar'],\n"," 'Mumbai': ['Goa'],\n"," 'Ajanta': ['Ellora', 'Aurangabad']}\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W8Py_tQAUxpL","executionInfo":{"status":"ok","timestamp":1687904416769,"user_tz":-330,"elapsed":373,"user":{"displayName":"Gauranga Kumar Baishya","userId":"00723650175688021252"}},"outputId":"e6c3a1df-9f0e-4821-c6fe-63a1711ba3e8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Leh',\n"," 'Shimla',\n"," 'Rishikesh',\n"," 'Delhi',\n"," 'Agra',\n"," 'Pushkar',\n"," 'Vaishali',\n"," 'Varanasi',\n"," 'Bodhgaya',\n"," 'Kolkatta',\n"," 'Ajanta',\n"," 'Ellora',\n"," 'Aurangabad',\n"," 'Mumbai',\n"," 'Goa',\n"," 'Bangalore',\n"," 'Chennai',\n"," 'Madurai',\n"," 'Cochin',\n"," 'Thiruvanandhapuram',\n"," 'Kanyakumari']"]},"metadata":{},"execution_count":34}]}]}